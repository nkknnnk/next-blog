import Head from 'next/head'
import { Inter } from 'next/font/google'
import { GetServerSideProps } from 'next'
import { fetchArticles, fetchCategories } from '@/http'
import { AxiosResponse } from 'axios'
import { ICollectionResponse, ICategory, IArticle, IPagination, IQueryOptions } from '@/types'
import Tabs from '@/components/Tabs'
import ArticleList from '@/components/ArticleList'
import qs from 'qs'
import Pagination from '@/components/Pagination'
import { useRouter } from 'next/router'
import { debounce } from '@/utils'

const inter = Inter({ subsets: ['latin'] })

interface IPropTypes {
  items: ICategory[]
  articles: IArticle[]
  pagination: IPagination
}

export default function Home({ items, articles,pagination }: IPropTypes) {
  const router = useRouter();
  const {page, pageCount} = pagination
  
  const handleSearch = (query: string) => {
    router.push(`/?search=${query}`)
  }
  return (
    <>
      <Head>
        <title>Nitish&apos;s Blogs Homepage</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Tabs items={items} handleOnSearch={debounce(handleSearch, 500)}/>
      {/* Articles */}
      <ArticleList articles={articles} />
      <Pagination page={page} pageCount={pageCount}/>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async ({query}) => {
  // Articles
  const options: Partial<IQueryOptions> = {
    populate: ['author.avatar'],
    sort: ['id:desc'],
    pagination: {
      page: query.page? +query.page:1,
      pageSize: 10,
    }
  }
  if(query.search) {
    options.filters = {
      Title: {
        $containsi: query.search
      }
    }
  }
  const queryString = qs.stringify(options)
  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString)
  //Category
  const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories()
  return {
    props: {
      items: categories.data,
      
      articles: articles.data,
      pagination: articles.meta.pagination,
    }
  }
}
